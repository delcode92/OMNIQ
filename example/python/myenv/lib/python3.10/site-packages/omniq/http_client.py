"""
HTTP client module for OmniQ.
"""
import json
import requests
from typing import Dict, Any, Iterator
from .exceptions import OmniQAPIError


class HttpClient:
    """HTTP client for making requests to the Rust Axum endpoint."""
    
    def __init__(self, config):
        """
        Initialize HTTP client with configuration.
        
        Args:
            config: Config object containing API settings
        """
        self.config = config
        self.session = requests.Session()
        # Update to use the Rust Axum endpoint
        self.session.headers.update({
            "Content-Type": "application/json"
        })
    
    def post(self, endpoint: str, data: Dict[str, Any], stream: bool = False) -> Dict[str, Any]:
        """
        Make a POST request to the Rust Axum endpoint.
        
        Args:
            endpoint: API endpoint to call
            data: Data to send in the request body
            stream: Whether to stream the response
            
        Returns:
            Dict containing the API response or iterator for streaming
            
        Raises:
            OmniQAPIError: If the request fails
        """
        # Map the endpoint to the Rust Axum routes
        if endpoint == "/chat/completions":
            # Check if streaming is requested
            if data.get("stream", False):
                return self._stream_request("/openai-stream", data)
            else:
                url = f"{self.config.base_url}/openai"
        else:
            # For other endpoints, use the base URL as is
            url = f"{self.config.base_url}{endpoint}"
        
        try:
            # For non-streaming requests, send the model and messages as input
            if endpoint == "/chat/completions" and "stream" not in data:
                payload = {
                    "model": data.get("model"),
                    "input": json.dumps(data.get("messages", []))
                }
            else:
                payload = data
                
            response = self.session.post(url, json=payload)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            raise OmniQAPIError(f"API request failed: {str(e)}") from e
        except json.JSONDecodeError as e:
            raise OmniQAPIError(f"Failed to decode JSON response: {str(e)}") from e
    
    def _stream_request(self, endpoint: str, data: Dict[str, Any]) -> Iterator[Dict[str, Any]]:
        """
        Handle streaming requests to the Rust Axum endpoint.
        
        Args:
            endpoint: Streaming endpoint to call
            data: Data to send in the request body
            
        Yields:
            Dict containing streamed response data
            
        Raises:
            OmniQAPIError: If the request fails
        """
        url = f"{self.config.base_url}{endpoint}"
        
        try:
            # Prepare the payload for streaming
            payload = {
                "model": data.get("model"),
                "input": json.dumps(data.get("messages", [])),
                "stream": True
            }
            
            # Make streaming request
            response = self.session.post(url, json=payload, stream=True)
            response.raise_for_status()
            
            # Process the streamed response
            for line in response.iter_lines():
                if line:
                    decoded_line = line.decode('utf-8')
                    if decoded_line.startswith("data: "):
                        data_part = decoded_line[6:]  # Remove "data: " prefix
                        if data_part == "[DONE]":
                            break
                        try:
                            yield json.loads(data_part)
                        except json.JSONDecodeError:
                            # Skip lines that can't be parsed
                            continue
        except requests.exceptions.RequestException as e:
            raise OmniQAPIError(f"Streaming request failed: {str(e)}") from e
        except json.JSONDecodeError as e:
            raise OmniQAPIError(f"Failed to decode JSON response: {str(e)}") from e